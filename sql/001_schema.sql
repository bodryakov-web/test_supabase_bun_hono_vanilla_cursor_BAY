-- Схема БД для демо: таблицы posts, comments, likes и политики RLS

-- Таблица posts: публикации/темы для обсуждения
create table if not exists public.posts (
	id bigint generated by default as identity primary key,
	title text not null,
	body text,
	created_at timestamptz not null default now()
);

-- Таблица comments: комментарии к постам
create table if not exists public.comments (
	id bigint generated by default as identity primary key,
	post_id bigint not null references public.posts(id) on delete cascade,
	author_id uuid references auth.users(id),
	author_name text,
	content text not null,
	created_at timestamptz not null default now()
);

-- Таблица likes: отметки «нравится» к постам
create table if not exists public.likes (
	id bigint generated by default as identity primary key,
	post_id bigint not null references public.posts(id) on delete cascade,
	author_id uuid references auth.users(id),
	author_name text,
	created_at timestamptz not null default now()
);

-- Уникальность лайка пользователя на пост (для авторизованных пользователей)
create unique index if not exists likes_post_user_unique
on public.likes (post_id, author_id)
where author_id is not null;

-- Включаем RLS и настраиваем политики: чтение всем, запись/изменение/удаление — только владельцу
alter table public.comments enable row level security;
alter table public.likes enable row level security;

-- Политики для comments
drop policy if exists "Comments: public read" on public.comments;
create policy "Comments: public read"
on public.comments for select
to public using (true);

drop policy if exists "Comments: insert own" on public.comments;
create policy "Comments: insert own"
on public.comments for insert
to authenticated with check (auth.uid() = author_id);

drop policy if exists "Comments: update own" on public.comments;
create policy "Comments: update own"
on public.comments for update
to authenticated using (auth.uid() = author_id);

drop policy if exists "Comments: delete own" on public.comments;
create policy "Comments: delete own"
on public.comments for delete
to authenticated using (auth.uid() = author_id);

-- Политики для likes
drop policy if exists "Likes: public read" on public.likes;
create policy "Likes: public read"
on public.likes for select
to public using (true);

drop policy if exists "Likes: insert own" on public.likes;
create policy "Likes: insert own"
on public.likes for insert
to authenticated with check (auth.uid() = author_id);

drop policy if exists "Likes: delete own" on public.likes;
create policy "Likes: delete own"
on public.likes for delete
to authenticated using (auth.uid() = author_id);


